*** general ***

author   = Agrammon Group
date     = 2020-10-21
taxonomy = Livestock::FatteningPigs::NxOx

+short

Computes the annual loss of N2, NO, N2O from dairy cow housing and storage.

+description

TODO!

*** input ***

*** technical ***

+er_n2_solid_Slurry
  value = 0.0
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot

+er_n2_solid_Solid
  value = 0.05
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot

+er_n2_liquid_Slurry
  value = 0.02
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot

+er_n2_liquid_Solid
  value = 0.0
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot



+er_no_solid_Slurry
  value = 0.0
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot

+er_no_solid_Solid
  value = 0.05
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot

+er_no_liquid_Slurry
  value = 0.002
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot

+er_no_liquid_Solid
  value = 0.0
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot




+er_n2o_solid_Slurry
  value = 0.0
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot

+er_n2o_solid_Solid
  value = 0.05
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot

+er_n2o_liquid_Slurry
  value = 0.002
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot

+er_n2o_liquid_Solid
  value = 0.0
  ++units
    en = -
  ++description
     Emission rate for N2 based on Ntot

*** external ***

+Housing
+Housing::Type

*** output ***

+er_n2_nsolid
  print = FatteningPigs
  ++units
      en = -
  ++description
    Annual N2 emissions from fattening pigs housing, yard and grazing (production).
  ++formula
    given ( Val(housing_type, Housing::Type) ) {
      return Tech(er_n2_solid_Slurry) when 'Slurry_Conventional';
      return Tech(er_n2_solid_Slurry) when 'Slurry_Label';
      return Tech(er_n2_solid_Slurry)  when 'Slurry_Label_Open';
      return Tech(er_n2_solid_Solid)  when 'Deep_Litter';
      return 0                        when 'Outdoor';
    };

+er_no_nsolid
  print = FatteningPigs
  ++units
      en = -
  ++description
    Annual N2 emissions from fattening pigs housing, yard and grazing (production).
  ++formula
    given ( Val(housing_type, Housing::Type) ) {
      return Tech(er_no_solid_Slurry) when 'Slurry_Conventional';
      return Tech(er_no_solid_Slurry) when 'Slurry_Label';
      return Tech(er_no_solid_Slurry) when 'Slurry_Label_Open';
      return Tech(er_no_solid_Solid)  when 'Deep_Litter';
      return 0                        when 'Outdoor';
    };

+er_n2o_nsolid
  print = FatteningPigs
  ++units
      en = -
  ++description
    Annual N2 emissions from fattening pigs housing, yard and grazing (production).
  ++formula
    given ( Val(housing_type, Housing::Type) ) {
      return Tech(er_n2o_solid_Slurry)  when 'Slurry_Conventional';
      return Tech(er_n2o_solid_Slurry)  when 'Slurry_Label';
      return Tech(er_n2o_solid_Slurry)  when 'Slurry_Label_Open';
      return Tech(er_n2o_solid_Solid)   when 'Deep_Litter';
      return 0                          when 'Outdoor';
    };

+er_n2_nliquid
  print = FatteningPigs
  ++units
      en = -
  ++description
    Annual N2 emissions from fattening pigs housing, yard and grazing (production).
  ++formula
    given ( Val(housing_type, Housing::Type) ) {
      return Tech(er_n2_liquid_Slurry)  when 'Slurry_Conventional';
      return Tech(er_n2_liquid_Slurry)  when 'Slurry_Label';
      return Tech(er_n2_liquid_Slurry)  when 'Slurry_Label_Open';
      return Tech(er_n2_liquid_Solid)   when 'Deep_Litter';
      return 0                          when 'Outdoor';
    };

+er_no_nliquid
  print = FatteningPigs
  ++units
      en = -
  ++description
    Annual N2 emissions from fattening pigs housing, yard and grazing (production).
  ++formula
    given ( Val(housing_type, Housing::Type) ) {
      return Tech(er_no_liquid_Slurry)  when 'Slurry_Conventional';
      return Tech(er_no_liquid_Slurry)  when 'Slurry_Label';
      return Tech(er_no_liquid_Slurry)  when 'Slurry_Label_Open';
      return Tech(er_no_liquid_Solid)   when 'Deep_Litter';
      return 0                          when 'Outdoor';
    };

+er_n2o_nliquid
  print = FatteningPigs
  ++units
      en = -
  ++description
    Annual N2 emissions from fattening pigs housing, yard and grazing (production).
  ++formula
    given ( Val(housing_type, Housing::Type) ) {
      return Tech(er_n2o_liquid_Slurry) when 'Slurry_Conventional';
      return Tech(er_n2o_liquid_Slurry) when 'Slurry_Label';
      return Tech(er_n2o_liquid_Slurry) when 'Slurry_Label_Open';
      return Tech(er_n2o_liquid_Solid)  when 'Deep_Litter';
      return 0                          when 'Outdoor';
    };



+n2_nsolid
  print = FatteningPigs
  ++labels
     en = Grazing, housing, yard storage fattening pig N2-emissions
        de = Weide, Stall und Laufhof Mastschweine N2-Emission
        fr = Porcs à l'engrais Emissions de N2 pâturage, étable et parcours extérieur
  ++units
    en = kg N/year
        de = kg N/Jahr
        fr = kg N/an
  ++description
    Annual N2 emissions from fattening pigs housing, yard and grazing (production).
  ++formula
     ( 
      Val(n_into_housing, Housing) * 
      (1 - Val(share_liquid, Housing::Type)) 
     ) * Out(er_n2_nsolid);


+no_nsolid
  print = FatteningPigs
  ++labels
    en = Grazing, housing and yard fattening pig NO-emissions
        de = Weide, Stall und Laufhof Mastschweine NO-Emission
        fr = Porcs à l'engrais Emissions de NO pâturage, étable et parcours extérieur
  ++units
    en = kg N/year
        de = kg N/Jahr
        fr = kg N/an
  ++description
    Annual NO emissions from fattening pigs housing, yard and grazing (production).
  ++formula
     ( 
      Val(n_into_housing, Housing) * 
      (1 - Val(share_liquid, Housing::Type)) 
     ) * Out(er_no_nsolid);

+n2o_nsolid
  print = FatteningPigs
  ++labels
    en = housing, yard and storage fattening pig N2O-emissions
    de = Stall, Laufhof und LagerMastschweine N2O-Emission
    fr = Porcs à l'engrais Emissions de N2O pâturage, étable et parcours extérieur
  ++units
    en = kg N/year
    de = kg N/Jahr
    fr = kg N/an
  ++description
    Annual N2O emissions from fattening pigs housing, yard and grazing (production).
  ++formula
     ( 
      Val(n_into_housing, Housing) * 
      (1 - Val(share_liquid, Housing::Type)) 
     ) * Out(er_n2o_nsolid);

   
+n2_nliquid
  print = FatteningPigs
  ++labels
     en = housing, yard and storage fattening pig N2-emissions
        de = Weide, Stall und Laufhof Mastschweine N2-Emission
        fr = Porcs à l'engrais Emissions de N2 pâturage, étable et parcours extérieur
  ++units
    en = kg N/year
        de = kg N/Jahr
        fr = kg N/an
  ++description
    Annual N2 emissions from fattening pigs housing, yard and grazing (production).
  ++formula
     ( Val(n_into_housing, Housing) * Val(share_liquid, Housing::Type) 
     ) * Out(er_n2_nliquid);


+no_nliquid
  print = FatteningPigs
  ++labels
    en = housing, yard and storage fattening pig NO-emissions
        de = Weide, Stall und Laufhof Mastschweine NO-Emission
        fr = Porcs à l'engrais Emissions de NO pâturage, étable et parcours extérieur
  ++units
    en = kg N/year
        de = kg N/Jahr
        fr = kg N/an
  ++description
    Annual NO emissions from fattening pigs housing, yard and grazing (production).
  ++formula
     ( Val(n_into_housing, Housing) * Val(share_liquid, Housing::Type)
     ) * Out(er_no_nliquid); 

+n2o_nliquid
  print = FatteningPigs
  ++labels
    en = Grazing, housing and yard fattening pig N2O-emissions
    de = Weide, Stall und Laufhof Mastschweine N2O-Emission
    fr = Porcs à l'engrais Emissions de N2O pâturage, étable et parcours extérieur
  ++units
    en = kg N/year
    de = kg N/Jahr
    fr = kg N/an
  ++description
    Annual N2O emissions from fattening pigs housing, yard and grazing (production).
  ++formula
     ( Val(n_into_housing, Housing) * Val(share_liquid, Housing::Type)
     ) *  Out(er_n2o_nliquid);         
